{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["\n// 1. Import libraries\nimport flatpickr from \"flatpickr\"; \nimport \"flatpickr/dist/flatpickr.min.css\"; \nimport iziToast from \"izitoast\"; \nimport \"izitoast/dist/css/iziToast.min.css\"; \n\n// 2. Declaration of variables\nconst datetimePicker = document.querySelector('#datetime-picker'); \nconst startBtn = document.querySelector('[data-start]'); \nconst stopBtn = document.querySelector('[data-stop]'); \nconst day = document.querySelector('[data-days]');\nconst hour = document.querySelector('[data-hours]');\nconst min = document.querySelector('[data-minutes]');\nconst sec = document.querySelector('[data-seconds]');\n\nlet userSelectedDate = null; \nlet intervalId = null; \n\n// 3. Flatpickr initialization with explicit error handling\nflatpickr(datetimePicker, {\n  enableTime: true, \n  time_24hr: true, \n  defaultDate: new Date(), \n  minuteIncrement: 1, \n\n  onClose(selectedDates) { \n    userSelectedDate = selectedDates[0]; \n    if (userSelectedDate < new Date()) { \n      iziToast.error({\n        title: 'Error!',\n        message: 'Please choose a date in the future',\n        position: 'topRight'\n      });\n      startBtn.disabled = true; \n      return;\n    }\n\n    startBtn.disabled = false;\n  },\n});\n\n// 4. StartBtn button click event handler\nstartBtn.addEventListener('click', () => {\n  if (userSelectedDate === null) return;\n\n  const targetDate = userSelectedDate.getTime(); \n  const now = new Date().getTime(); \n\n  if (targetDate <= now) { \n    iziToast.error({\n      title: 'Error!',\n      message: 'The selected date has already passed',\n      position: 'topRight'\n    });\n    return;\n  }\n\n  startBtn.disabled = true; \n  stopBtn.disabled = false; \n  datetimePicker.disabled = true; \n\n  intervalId = setInterval(() => updateTimer(targetDate), 1000);\n});\n\n// 5. StopBtn button click event handler\nstopBtn.addEventListener('click', () => {\n  clearInterval(intervalId); \n  startBtn.disabled = false; \n  stopBtn.disabled = true; \n  datetimePicker.disabled = false; \n  resetTimerFields();\n});\n\n// 6. Timer update function\nfunction updateTimer(targetDate) {\n  const now = new Date().getTime(); \n  const timeLeft = targetDate - now; \n\n  if (timeLeft <= 0) {\n    clearInterval(intervalId); \n    startBtn.disabled = false; \n    stopBtn.disabled = true; \n    datetimePicker.disabled = false; \n    resetTimerFields();\n    iziToast.info({\n      title: 'The timer has ended!',\n      message: 'The selected date has arrived',\n      position: 'topRight'\n    });\n    return;\n  }\n\n  const { days, hours, minutes, seconds } = convertMs(timeLeft);\n\n  // Displaying the remaining time in the timer fields\n  day.textContent = formatTimeValue(days);\n  hour.textContent = formatTimeValue(hours);\n  min.textContent = formatTimeValue(minutes);\n  sec.textContent = formatTimeValue(seconds);\n}\n\n// 7. The function of converting milliseconds to days, hours, minutes and seconds\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n// console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\n// console.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\n// console.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n\n// 8. Time value formatting function (adds a leading zero if the value is less than 10)\nfunction formatTimeValue(value) {\n  return value < 10 ? \"0\" + value : value;\n}\n\n// 9. Timer field reset function to '00'\nfunction resetTimerFields() {\n  [day, hour, min, sec].forEach(field => field.textContent = '00');\n}"],"names":["datetimePicker","startBtn","stopBtn","day","hour","min","sec","userSelectedDate","intervalId","flatpickr","selectedDates","iziToast","targetDate","now","updateTimer","resetTimerFields","timeLeft","days","hours","minutes","seconds","convertMs","formatTimeValue","ms","value","field"],"mappings":"2GAQA,MAAMA,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAU,SAAS,cAAc,aAAa,EAC9CC,EAAM,SAAS,cAAc,aAAa,EAC1CC,EAAO,SAAS,cAAc,cAAc,EAC5CC,EAAM,SAAS,cAAc,gBAAgB,EAC7CC,EAAM,SAAS,cAAc,gBAAgB,EAEnD,IAAIC,EAAmB,KACnBC,EAAa,KAGjBC,EAAUT,EAAgB,CACxB,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EAEjB,QAAQU,EAAe,CAErB,GADAH,EAAmBG,EAAc,CAAC,EAC9BH,EAAmB,IAAI,KAAQ,CACjCI,EAAS,MAAM,CACb,MAAO,SACP,QAAS,qCACT,SAAU,UAClB,CAAO,EACDV,EAAS,SAAW,GACpB,MACD,CAEDA,EAAS,SAAW,EACrB,CACH,CAAC,EAGDA,EAAS,iBAAiB,QAAS,IAAM,CACvC,GAAIM,IAAqB,KAAM,OAE/B,MAAMK,EAAaL,EAAiB,UAC9BM,EAAM,IAAI,KAAM,EAAC,QAAO,EAE9B,GAAID,GAAcC,EAAK,CACrBF,EAAS,MAAM,CACb,MAAO,SACP,QAAS,uCACT,SAAU,UAChB,CAAK,EACD,MACD,CAEDV,EAAS,SAAW,GACpBC,EAAQ,SAAW,GACnBF,EAAe,SAAW,GAE1BQ,EAAa,YAAY,IAAMM,EAAYF,CAAU,EAAG,GAAI,CAC9D,CAAC,EAGDV,EAAQ,iBAAiB,QAAS,IAAM,CACtC,cAAcM,CAAU,EACxBP,EAAS,SAAW,GACpBC,EAAQ,SAAW,GACnBF,EAAe,SAAW,GAC1Be,GACF,CAAC,EAGD,SAASD,EAAYF,EAAY,CAC/B,MAAMC,EAAM,IAAI,KAAM,EAAC,QAAO,EACxBG,EAAWJ,EAAaC,EAE9B,GAAIG,GAAY,EAAG,CACjB,cAAcR,CAAU,EACxBP,EAAS,SAAW,GACpBC,EAAQ,SAAW,GACnBF,EAAe,SAAW,GAC1Be,IACAJ,EAAS,KAAK,CACZ,MAAO,uBACP,QAAS,gCACT,SAAU,UAChB,CAAK,EACD,MACD,CAED,KAAM,CAAE,KAAAM,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAQ,EAG5Db,EAAI,YAAcmB,EAAgBL,CAAI,EACtCb,EAAK,YAAckB,EAAgBJ,CAAK,EACxCb,EAAI,YAAciB,EAAgBH,CAAO,EACzCb,EAAI,YAAcgB,EAAgBF,CAAO,CAC3C,CAGA,SAASC,EAAUE,EAAI,CAMrB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAC1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EACpCJ,EAAU,KAAK,MAAQI,EAAK,MAAO,KAAQ,GAAM,EACjDH,EAAU,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAMA,SAASE,EAAgBE,EAAO,CAC9B,OAAOA,EAAQ,GAAK,IAAMA,EAAQA,CACpC,CAGA,SAAST,GAAmB,CAC1B,CAACZ,EAAKC,EAAMC,EAAKC,CAAG,EAAE,QAAQmB,GAASA,EAAM,YAAc,IAAI,CACjE"}